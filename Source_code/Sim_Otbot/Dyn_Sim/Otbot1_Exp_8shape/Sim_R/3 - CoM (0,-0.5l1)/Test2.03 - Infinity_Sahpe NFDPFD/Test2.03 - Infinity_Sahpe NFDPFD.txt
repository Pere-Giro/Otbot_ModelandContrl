Duration: 18 seconds

Parameters:

m.I_b = 1.06458;   % Central moment of inertia of the chassis body about axis 3 [kg*m^2]
m.I_p = 2.22223; % Central moment of inertia of the platform body about axis 3" [kg*m^2]
m.I_a = 1.03570*1e-2; % Axial moment of inertia of one wheel [kg*m^2]
m.I_t = 5.61007*1e-3; % Twisting moment of inertia of one wheel [kg*m^2]

m.l_1 = 0.25; % Pivot offset relative to the wheels axis [m]
m.l_2 = 0.20; % One half of the wheels separation [m]

m.m_b = 105.00; % Mass of the chassis base [kg]
m.m_w = 2.0714; % Mass of one wheel [kg]
m.m_p = 21.94795; % Mass of the platform [kg]

m.x_G = -m.l_1/2; % x coord of the c.o.m. of the chassis body in the chassis frame [m]
m.y_G = 0; % y coord of the c.o.m. of the chassis body in the chassis frame [m]

m.x_F = 0; % x coord of the c.o.m. of the platform body in the platform frame [m]
m.y_F = 0; % y coord of the c.o.m. of the platform body in the platform frame [m]

m.r = 0.10;   % Wheel radius [m]

m.b_frict = [0;0;0]; % Viscous friction coefficient [kg*m^2*s^-1]

Friction modelled as:
tau_friction_right = b · varphidot_r
tau_friction_left = b · varphidot_l
tau_friction_pivot = b · varphidot_p


Actions vector, CTC:

u = kp(pd-p) + kv(pdotd-pdot) + pdotdot_d
_________________________________________
Controler

    Actc = [zeros(3,3),eye(3,3); zeros(3,3), zeros(3,3)];
    Bctc = [zeros(3,3);eye(3,3)];

    EIG_set = [-0.8,-0.8,-0.8, -8, -8, -8]; % Desired eigenvalues

    cp.K = place(Actc,Bctc,EIG_set);

Poles // Eigvals
   -0.8
   -0.8
   -0.8
   -8
   -8
   -8

Resulting Kmatrix:

6.40000000000000	0	0	8.80000000000000	0	0
0	6.40000000000000	0	0	8.80000000000000	0
0	0	6.40000000000000	0	0	8.80000000000000



__________________________________________

opts = odeset('MaxStep',1e-3)

h = 0.001;    % Number of samples within final vectors (times and states)

__________________________________________
Desired trajectory given by:

%-------- Experimental trajectory 3 (Infinity Shape) --------%

t1 = 4;
t2 = (3*pi)/2 + 4;
t3 = 10;
t4 = (9*pi^2-36*pi)/(8-6*pi)+10;
t5 = (12*pi-48)/(4-3*pi) + t4;

if t <= t1
    Xo = 0;
    Yo = 0;
    Vox = 0;
    Voy = 0;
    ax = 0.25;
    ay = 0;
    
    X = Xo + Vox*t + 0.5*ax*t^2;
    Y = Yo + Voy*t + 0.5*ay*t^2;
    
    X_dot = Vox + ax*t;
    Y_dot = Voy + ay*t;
    
    X_dotdot = ax; 
    Y_dotdot = ay;
    
    Alpha = 0;
    Alpha_dot = 0;
    Alpha_dotdot = 0;
    
elseif t>t1 && t<=t2
    % Xo = 2;
    % Yo = 0;
    % Vox = 1;
    % Voy = 0;
    thetao = -pi/2;
    omega = 1; % [rad/s]
    xc1 = 2;
    yc1 = 1;
    R = 1;

    X = R*cos(omega*(t-t1) + thetao) + xc1; 
    Y = R*sin(omega*(t-t1) + thetao) + yc1;

    X_dot =  - R*omega*sin(thetao + omega*(t - t1));
    Y_dot =    R*omega*cos(thetao + omega*(t - t1));

    X_dotdot =   - R*omega^2*cos(thetao + omega*(t - t1));
    Y_dotdot =   - R*omega^2*sin(thetao + omega*(t - t1));

    Alpha =  omega*(t-t1);
    Alpha_dot =  omega;
    Alpha_dotdot = 0;
    
elseif t>t2 && t<=t3
    Xo = 1;
    Yo = 1;
    Vox = 0;
    Voy = -1;
    ax = 0;
    ay = 4*(8-3*pi)/(12-3*pi)^2;
    
    X = Xo + Vox*(t-t2) + 0.5*ax*(t-t2)^2;
    Y = Yo + Voy*(t-t2) + 0.5*ay*(t-t2)^2;
    
    X_dot = Vox + ax*(t-t2);
    Y_dot = Voy + ay*(t-t2);
    
    X_dotdot = ax; 
    Y_dotdot = ay;
    
    Alpha = 3*pi/2;
    Alpha_dot = 0;
    Alpha_dotdot = 0;
    
elseif t>t3 && t<=t4
    % Xo = 1;
    % Yo = -1;
    % Vox = 0;
    % Voy = (-56+9*pi)/(16-3*pi);
    thetao = 0;
    omega = (4-3*pi)/(12-3*pi); % [rad/s]
    xc2 = 0;
    yc2 = -1;
    R = 1;

    X = R*cos(omega*(t-t3) + thetao) + xc2; 
    Y = R*sin(omega*(t-t3) + thetao) + yc2;

    X_dot =  - R*omega*sin(thetao + omega*(t - t3));
    Y_dot =    R*omega*cos(thetao + omega*(t - t3));

    X_dotdot =   - R*omega^2*cos(thetao + omega*(t - t3));
    Y_dotdot =   - R*omega^2*sin(thetao + omega*(t - t3));

    Alpha =  omega*(t-t3) + 3*pi/2;
    Alpha_dot =  omega;
    Alpha_dotdot = 0;
    
elseif t>t4 && t<=t5
    Xo = 0;
    Yo = 0;
    Vox = -((4-3*pi)/(12-3*pi));
    Voy = 0;
    Xf = 2;
    ax = 2*(Xf - Xo - Vox*(t5-t4))/(t5-t4)^2;
    ay = 0;
    
    X = Xo + Vox*(t-t4) + 0.5*ax*(t-t4)^2;
    Y = Yo + Voy*(t-t4) + 0.5*ay*(t-t4)^2;
    
    X_dot = Vox + ax*(t-t4);
    Y_dot = Voy + ay*(t-t4);
    
    X_dotdot = ax; 
    Y_dotdot = ay;
    
    Alpha = 0;
    Alpha_dot = 0;
    Alpha_dotdot = 0;
else
    X = 2;
    Y = 0;
    
    X_dot = 0;
    Y_dot = 0;
    
    X_dotdot = 0; 
    Y_dotdot = 0;
    
    Alpha = 0;
    Alpha_dot = 0;
    Alpha_dotdot = 0;
end

%--------------------------------------------------%
__________________________________________________________
Initial Conditions

p0 = [0,0,0]';
varphi0 = [0,0,0]';

pdot0 = zeros(3,1);

% Need MIIK
MIIKmat = sm.MIIKmatrix(p0(3),varphi0(3));

% Computing p0
varphidot0 = MIIKmat*pdot0;

% Initial conditions for the system
xs0=[p0; varphi0; pdot0; varphidot0];
____________________________________________________________
Disturbances given by

if t>3 && t<4
    D = zeros(6,1);
    D(1:2,1) = [0;-150];
elseif t>8 && t<9
    D = zeros(6,1);
    D(1:2,1) = [200;0];
elseif t>11 && t<12
    D = zeros(6,1);
    D(1:2,1) = [-350;0];
elseif t>30 && t<31
    D = zeros(6,1);
    D(1:2,1) = [0;-150];
else
    D = zeros(6,1);
end
